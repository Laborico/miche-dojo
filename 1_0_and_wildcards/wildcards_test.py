from wildcards import possibilities

def loop(tokens, expected):
    for i, token in enumerate(tokens):   
        test = possibilities(token)
        test.sort()
        assert test == expected[i]

def test_single_wildcard():
    tokens = ['00?', '1?1',
              '?', '10000?111']
    
    expected = [['000', '001'], ['101', '111'], 
                ['0', '1'], ['100000111', '100001111']]
    
    loop(tokens, expected)
    
def test_two_wildcards():
    tokens = ['00?110?110', '0100?010?10', 
              '00000000001?0?0','011?1011000?0', 
              '??011']
    
    expected = [['0001100110', '0001101110', '0011100110', '0011101110'],
                ['01000010010', '01000010110', '01001010010', '01001010110'],
                ['000000000010000', '000000000010010', '000000000011000', '000000000011010'],
                ['0110101100000', '0110101100010', '0111101100000', '0111101100010'],
                ['00011', '01011', '10011', '11011']]
    
    loop(tokens, expected)
    
def test_multiple_wildcards():
    tokens = ['0?100110?01?11', '??11011???0', 
              '1?1????1?010010','10110??11?10', 
              '?0?1?11?10011?0']
    
    expected = [
        ['00100110001011', '00100110001111', '00100110101011', '00100110101111', '01100110001011', 
         '01100110001111', '01100110101011', '01100110101111'
         ],
        ['00110110000', '00110110010', '00110110100', '00110110110', '00110111000', '00110111010', 
         '00110111100', '00110111110', '01110110000', '01110110010', '01110110100', '01110110110', 
         '01110111000', '01110111010', '01110111100', '01110111110', '10110110000', '10110110010', 
         '10110110100', '10110110110', '10110111000', '10110111010', '10110111100', '10110111110', 
         '11110110000', '11110110010', '11110110100', '11110110110', '11110111000', '11110111010', 
         '11110111100', '11110111110'
         ],
        ['101000010010010', '101000011010010', '101000110010010', '101000111010010', '101001010010010', 
         '101001011010010', '101001110010010', '101001111010010', '101010010010010', '101010011010010', 
         '101010110010010', '101010111010010', '101011010010010', '101011011010010', '101011110010010', 
         '101011111010010', '101100010010010', '101100011010010', '101100110010010', '101100111010010', 
         '101101010010010', '101101011010010', '101101110010010', '101101111010010', '101110010010010', 
         '101110011010010', '101110110010010', '101110111010010', '101111010010010', '101111011010010', 
         '101111110010010', '101111111010010', '111000010010010', '111000011010010', '111000110010010', 
         '111000111010010', '111001010010010', '111001011010010', '111001110010010', '111001111010010', 
         '111010010010010', '111010011010010', '111010110010010', '111010111010010', '111011010010010', 
         '111011011010010', '111011110010010', '111011111010010', '111100010010010', '111100011010010', 
         '111100110010010', '111100111010010', '111101010010010', '111101011010010', '111101110010010', 
         '111101111010010', '111110010010010', '111110011010010', '111110110010010', '111110111010010', 
         '111111010010010', '111111011010010', '111111110010010', '111111111010010'
         ],
        ['101100011010', '101100011110', '101100111010', '101100111110', '101101011010', '101101011110', 
         '101101111010', '101101111110'
         ],
        ['000101101001100', '000101101001110', '000101111001100', '000101111001110', '000111101001100', 
         '000111101001110', '000111111001100', '000111111001110', '001101101001100', '001101101001110', 
         '001101111001100', '001101111001110', '001111101001100', '001111101001110', '001111111001100', 
         '001111111001110', '100101101001100', '100101101001110', '100101111001100', '100101111001110', 
         '100111101001100', '100111101001110', '100111111001100', '100111111001110', '101101101001100', 
         '101101101001110', '101101111001100', '101101111001110', '101111101001100', '101111101001110', 
         '101111111001100', '101111111001110']]
    
    loop(tokens, expected)
    